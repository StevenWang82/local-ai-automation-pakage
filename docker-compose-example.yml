volumes:
  freshrss_data:
  freshrss_extensions:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  open-webui:
  # flowise:

networks:
  my-internal-network:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  # build: . # 指示 Docker Compose 從目前目錄下的 Dockerfile 構建镜像
  networks: ['my-internal-network']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY # 敏感資料加密資訊
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true # 防止容器重啟後丟失配置
    - N8N_RUNNERS_ENABLED=true # 启用 Runner

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['my-internal-network']
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['my-internal-network']
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull deepseek-r1:8b; ollama pull nomic-embed-text"

services:
#   flowise:
#     image: flowiseai/flowise
#     networks: ['demo']
#     restart: unless-stopped
#     container_name: flowise
#     environment:
#         - PORT=3001
#     ports:
#         - 3001:3001
#     extra_hosts:
#       - "host.docker.internal:host-gateway"        
#     volumes:
#         - ~/.flowise:/root/.flowise
#     entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    networks: ['my-internal-network']
    restart: unless-stopped
    container_name: open-webui
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data

  postgres:
    image: postgres:16-alpine
    networks: ['my-internal-network']
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
        - "-c"
        - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
      - ./python_script:/python_script
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    networks: ['my-internal-network']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY}


  freshrss:
    image: freshrss/freshrss
    networks: ['my-internal-network']
    container_name: freshrss
    hostname: freshrss
    restart: unless-stopped
    logging:
      options:
        max-size: 10m
    volumes:
      - freshrss_data:/var/www/FreshRSS/data
      - freshrss_extensions:/var/www/FreshRSS/extensions
    ports:
      - 8080:80
    environment:
      TZ: Asia/Taipei
      CRON_MIN: '3'
      TRUSTED_PROXY: 172.16.0.1/12 192.168.0.1/16
      OIDC_ENABLED: 0
      FRESHRSS_INSTALL: |-
        --api-enabled
        --base-url ${FRESHRSS_BASE_URL}
        --default-user admin
        --language zh_TW

      # 如果有需要使用其他資料庫 (預設使用SQLite)
      # --db-base freshrss
      # --db-host freshrss-db
      # --db-password ${FRESHRSS_DB_PASSWORD}
      # --db-user ${FRESHRSS_DB_USER}
      
      FRESHRSS_USER: |-
        --api-password ${FRESHRSS_ADMIN_API_PASSWORD}
        --email ${FRESHRSS_ADMIN_EMAIL}
        --language zh_TW
        --password ${FRESHRSS_ADMIN_PASSWORD}
        --user admin

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  # ollama-gpu:
  #   profiles: ["gpu-nvidia"]
  #   <<: *service-ollama
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  # ollama-pull-llama-gpu:
  #   profiles: ["gpu-nvidia"]
  #   <<: *init-ollama
  #   depends_on:
  #     - ollama-gpu
